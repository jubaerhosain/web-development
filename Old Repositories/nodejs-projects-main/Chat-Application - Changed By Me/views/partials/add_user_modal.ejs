<div class="modal-wrapper" id="add-user-modal">
    <div class="modal">
        <a href="#" onclick="closeModal()" class="modal-close">+</a>
        <div class="modal-title">
            <h2>Create New User</h2>
        </div>
        <div class="modal-body">
            <form method="post" action="/users" enctype="multipart/form-data" id="add-user-form">
                <input type="text" placeholder="enter name" name="name" />
                <p class="error name-error"></p>

                <input type="text" placeholder="enter email" name="email" />
                <p class="error email-error"></p>

                <input type="text" placeholder="enter mobile" name="mobile" />
                <p class="error mobile-error"></p>

                <input type="password" placeholder="enter password" name="password" />
                <p class="error password-error"></p>

                <input type="file" name="avatar" />
                <p class="error avatar-error"></p>

                <p class="error common-error"></p>

                <input type="submit" value="Submit" />
            </form>
        </div>
    </div>
</div>

<script>
    const modal = document.querySelector("#add-user-modal");
    const form = document.querySelector("#add-user-form");

    // successToast
    const successToast = Toastify({
        text: "User added successfully! Reloading the list...",
        duration: 1000,
    });

    function closeModal() {
        modal.style.display = "none";
    }

    function openModal() {
        modal.style.display = "block";
    }

    function hideErrorPlaceholders() {
        // hide error placeholders
        document.querySelectorAll("p.error").forEach((element) => {
            element.style.display = "none";
        });
    }

    // form submit handler
    form.onsubmit = async function (event) {
        // prevent reloading page
        event.preventDefault();

        hideErrorPlaceholders();

        // remove error class from input
        document.querySelectorAll("input.error").forEach((element) => {
            element.classList.remove("error");
        });

        // prepare form data
        const formData = new FormData(form);

        // send the request to the server
        const response = await fetch("/users", {
            method: "POST",
            body: formData,
        });

        // get response
        const result = await response.json();

        // handle error and response
        if (result.errors) {
            Object.keys(result.errors).forEach((fieldName) => {
                // make border red
                form[fieldName].classList.add("error");

                // set error placeholder
                const placeholder = document.querySelector(`.${fieldName}-error`);
                placeholder.textContent = result.errors[fieldName].msg;

                // make error placeholders visible
                placeholder.style.display = "block";
            });
        } else {
            // on success
            successToast.showToast();

            closeModal();

            hideErrorPlaceholders();

            setTimeout(() => {
                location.reload();
            }, 1000);
        }
    };
</script>
